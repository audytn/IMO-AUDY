{
  "address": "0x8e6BDA3D7653E1711BAf82B0a7D666D9C3Ea6579",
  "abi": [],
  "transactionHash": "0xc4e007e7ba7f6c1252a53a6289f71fcc1740ef45789c59b629689a09d8df1b02",
  "receipt": {
    "to": null,
    "from": "0xd0BE34550AC47e616B7220564605BA00912A5FeF",
    "contractAddress": "0x8e6BDA3D7653E1711BAf82B0a7D666D9C3Ea6579",
    "transactionIndex": 0,
    "gasUsed": "865727",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf7f265f00acc054285901e5ff580d1e2d70daed8533388021d180edbc3518936",
    "transactionHash": "0xc4e007e7ba7f6c1252a53a6289f71fcc1740ef45789c59b629689a09d8df1b02",
    "logs": [],
    "blockNumber": 9753558,
    "cumulativeGasUsed": "865727",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4f2c01eb4d7caab6f249b9d2c3d745d4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/AskHelper.sol\":\"AskHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/AskHelper.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\npragma experimental ABIEncoderV2;\\n\\n// import \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n// import \\\"./EnumerableMap.sol\\\";\\n// import \\\"./EnumerableSet.sol\\\";\\n\\nimport \\\"../openzeppelin/math/MathUpgradeable.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n\\nlibrary AskHelper {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct AskEntry {\\n        uint256 tokenId;\\n        uint256 price;\\n        address quoteTokenAddr;\\n    }\\n\\n    function getAsks(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks = new AskEntry[](_asksMap.length());\\n        for (uint256 i = 0; i < _asksMap.length(); ++i) {\\n            (uint256 tokenId, uint256 price) = _asksMap.at(i);\\n            asks[i] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n            });\\n        }\\n        return asks;\\n    }\\n\\n    function getAsksDesc(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks = new AskEntry[](_asksMap.length());\\n        if (_asksMap.length() > 0) {\\n            for (uint256 i = _asksMap.length() - 1; i > 0; --i) {\\n                (uint256 tokenId, uint256 price) = _asksMap.at(i);\\n                asks[_asksMap.length() - 1 - i] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n            }\\n            (uint256 tokenId, uint256 price) = _asksMap.at(0);\\n            asks[_asksMap.length() - 1] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n            });\\n        }\\n        return asks;\\n    }\\n\\n    function getAsksByPage(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        uint256 page,\\n        uint256 size\\n    ) public view returns (AskEntry[] memory) {\\n        if (_asksMap.length() > 0) {\\n            uint256 from = page == 0 ? 0 : (page - 1) * size;\\n            uint256 to =\\n                MathUpgradeable.min((page == 0 ? 1 : page) * size, _asksMap.length());\\n            AskEntry[] memory asks = new AskEntry[]((to - from));\\n            for (uint256 i = 0; from < to; ++i) {\\n                (uint256 tokenId, uint256 price) = _asksMap.at(from);\\n                asks[i] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n                ++from;\\n            }\\n            return asks;\\n        } else {\\n            return new AskEntry[](0);\\n        }\\n    }\\n\\n    function getAsksByPageDesc(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        uint256 page,\\n        uint256 size\\n    ) public view returns (AskEntry[] memory) {\\n        if (_asksMap.length() > 0) {\\n            uint256 from =\\n                _asksMap.length() - 1 - (page == 0 ? 0 : (page - 1) * size);\\n            uint256 to =\\n                _asksMap.length() -\\n                    1 -\\n                    MathUpgradeable.min(\\n                        (page == 0 ? 1 : page) * size - 1,\\n                        _asksMap.length() - 1\\n                    );\\n            uint256 resultSize = from - to + 1;\\n            AskEntry[] memory asks = new AskEntry[](resultSize);\\n            if (to == 0) {\\n                for (uint256 i = 0; from > to; ++i) {\\n                    (uint256 tokenId, uint256 price) = _asksMap.at(from);\\n                    asks[i] = AskEntry({\\n                        tokenId: tokenId,\\n                        price: price,\\n                        quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                    });\\n                    --from;\\n                }\\n                (uint256 tokenId, uint256 price) = _asksMap.at(0);\\n                asks[resultSize - 1] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n            } else {\\n                for (uint256 i = 0; from >= to; ++i) {\\n                    (uint256 tokenId, uint256 price) = _asksMap.at(from);\\n                    asks[i] = AskEntry({\\n                        tokenId: tokenId,\\n                        price: price,\\n                        quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                    });\\n                    --from;\\n                }\\n            }\\n            return asks;\\n        }\\n        return new AskEntry[](0);\\n    }\\n\\n    function getAsksByUser(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        mapping(address => EnumerableSet.UintSet) storage _userSellingTokens,\\n        address user\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks =\\n            new AskEntry[](_userSellingTokens[user].length());\\n        for (uint256 i = 0; i < _userSellingTokens[user].length(); ++i) {\\n            uint256 tokenId = _userSellingTokens[user].at(i);\\n            uint256 price = _asksMap.get(tokenId);\\n            address quoteTokenAddr = _asksQuoteTokens[tokenId];\\n            asks[i] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: quoteTokenAddr\\n            });\\n        }\\n        return asks;\\n    }\\n\\n    function getAsksByUserDesc(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        mapping(address => EnumerableSet.UintSet) storage _userSellingTokens,\\n        address user\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks =\\n            new AskEntry[](_userSellingTokens[user].length());\\n        if (_userSellingTokens[user].length() > 0) {\\n            for (\\n                uint256 i = _userSellingTokens[user].length() - 1;\\n                i > 0;\\n                --i\\n            ) {\\n                uint256 tokenId = _userSellingTokens[user].at(i);\\n                uint256 price = _asksMap.get(tokenId);\\n                asks[_userSellingTokens[user].length() - 1 - i] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n            }\\n            uint256 tokenId = _userSellingTokens[user].at(0);\\n            uint256 price = _asksMap.get(tokenId);\\n            asks[_userSellingTokens[user].length() - 1] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n            });\\n        }\\n        return asks;        \\n    }\\n}\",\"keccak256\":\"0x7674a43063567fce8e234c6269fdbd81e2dbb083f5443a3e81d5a2568e97d11e\"},\"contracts/libraries/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\nlibrary EnumerableMap {\\n    struct MapEntry {\\n        uint256 _key;\\n        uint256 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping(uint256 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        uint256 key,\\n        uint256 value\\n    ) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({_key: key, _value: value}));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, uint256 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, uint256 key)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index)\\n        private\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(\\n            map._entries.length > index,\\n            \\\"EnumerableMap: index out of bounds\\\"\\n        );\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, uint256 key) private view returns (uint256) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(\\n        Map storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) private view returns (uint256) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return _at(map._inner, index);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _get(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return _get(map._inner, key, errorMessage);\\n    }\\n}\",\"keccak256\":\"0x2d35e8d069cba1035d1f3269fcba8087a4b113b8598b3acd26b81e6c02864ab8\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xf1efe1fb497fe7a09f5238f294de1085e2658a1fca3912a2312eed7dfe254aed\"},\"contracts/openzeppelin/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x9dabe002a2d6d8b83448896728ea6bd2c6a571632decc95832e2093e85c43bc8\"}},\"version\":1}",
  "bytecode": "0x610eb4610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006b5760003560e01c80620743eb1461007057806324faa96914610099578063727fe92f146100ac57806391fa0728146100bf578063e2da53bb146100d2578063ef66b8e8146100e5575b600080fd5b61008361007e366004610d14565b6100f8565b6040516100909190610d45565b60405180910390f35b6100836100a7366004610cc9565b6103aa565b6100836100ba366004610cc9565b6105d5565b6100836100cd366004610ca8565b610712565b6100836100e0366004610ca8565b6107fb565b6100836100f3366004610d14565b610972565b6060600061010586610add565b111561036d576000831561011e57826001850302610121565b60005b600161012c88610add565b03039050600061015a60018587156101445787610147565b60015b020360016101548a610add565b03610aee565b600161016589610add565b0303905060018183030160608167ffffffffffffffff8111801561018857600080fd5b506040519080825280602002602001820160405280156101c257816020015b6101af610c7e565b8152602001906001900390816101a75790505b509050826102ce5760005b8385111561025d576000806101e88c8863ffffffff610b0416565b9150915060405180606001604052808381526020018281526020018c600085815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031681525084848151811061024157fe5b60209081029190910101525050600019909401936001016101cd565b506000806102718b8263ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908f9052829020546001600160a01b031691810191909152855192945090925090849060001987019081106102bc57fe5b60200260200101819052505050610362565b60005b838510610360576000806102eb8c8863ffffffff610b0416565b9150915060405180606001604052808381526020018281526020018c600085815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031681525084848151811061034457fe5b60209081029190910101525050600019909401936001016102d1565b505b93506103a292505050565b604080516000808252602082019092529061039e565b61038b610c7e565b8152602001906001900390816103835790505b5090505b949350505050565b6001600160a01b038116600090815260208390526040902060609081906103d090610add565b67ffffffffffffffff811180156103e657600080fd5b5060405190808252806020026020018201604052801561042057816020015b61040d610c7e565b8152602001906001900390816104055790505b506001600160a01b03841660009081526020869052604081209192509061044690610add565b11156105cc576001600160a01b038316600090815260208590526040812060019061047090610add565b0390505b8015610528576001600160a01b03841660009081526020869052604081206104a2908363ffffffff610b1c16565b905060006104b6898363ffffffff610b2816565b60408051606081018252848152602080820184905260008681528c8252838120546001600160a01b03908116848601528b168152908b905291909120919250908590859060019061050690610add565b03038151811061051257fe5b6020908102919091010152505060001901610474565b506001600160a01b0383166000908152602085905260408120610551908263ffffffff610b1c16565b90506000610565888363ffffffff610b2816565b60408051606081018252848152602080820184905260008681528b8252838120546001600160a01b03908116848601528a168152908a9052919091209192509084906001906105b390610add565b03815181106105be57fe5b602002602001018190525050505b95945050505050565b6001600160a01b038116600090815260208390526040902060609081906105fb90610add565b67ffffffffffffffff8111801561061157600080fd5b5060405190808252806020026020018201604052801561064b57816020015b610638610c7e565b8152602001906001900390816106305790505b50905060005b6001600160a01b038416600090815260208690526040902061067290610add565b81101561039e576001600160a01b03841660009081526020869052604081206106a1908363ffffffff610b1c16565b905060006106b5898363ffffffff610b2816565b600083815260208a81526040918290205482516060810184528681529182018490526001600160a01b0316918101829052865192935090918690869081106106f957fe5b6020026020010181905250505050806001019050610651565b60608061071e84610add565b67ffffffffffffffff8111801561073457600080fd5b5060405190808252806020026020018201604052801561076e57816020015b61075b610c7e565b8152602001906001900390816107535790505b50905060005b61077d85610add565b8110156107f357600080610797878463ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908b9052829020546001600160a01b0316918101919091528651929450909250908590859081106107de57fe5b60209081029190910101525050600101610774565b509392505050565b60608061080784610add565b67ffffffffffffffff8111801561081d57600080fd5b5060405190808252806020026020018201604052801561085757816020015b610844610c7e565b81526020019060019003908161083c5790505b509050600061086585610add565b111561096b576000600161087886610add565b0390505b80156108fb57600080610895878463ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908b9052829020546001600160a01b0316918101919091529193509150848460016108d98b610add565b0303815181106108e557fe5b602090810291909101015250506000190161087c565b5060008061090f868263ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908a9052829020546001600160a01b031691810191909152919350915083600161095289610add565b038151811061095d57fe5b602002602001018190525050505b9392505050565b6060600061097f86610add565b1115610aa457600083156109985782600185030261099b565b60005b905060006109c18486156109af57866109b2565b60015b026109bc89610add565b610aee565b9050606082820367ffffffffffffffff811180156109de57600080fd5b50604051908082528060200260200182016040528015610a1857816020015b610a05610c7e565b8152602001906001900390816109fd5790505b50905060005b82841015610a9957600080610a398b8763ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908f9052829020546001600160a01b031691810191909152865192945090925090859085908110610a8057fe5b6020908102919091010152505060019384019301610a1e565b5092506103a2915050565b6040805160008082526020820190925290610ad5565b610ac2610c7e565b815260200190600190039081610aba5790505b5090506103a2565b6000610ae882610b34565b92915050565b6000818310610afd578161096b565b5090919050565b600080610b118484610b38565b915091509250929050565b600061096b8383610b9d565b600061096b8383610be2565b5490565b815460009081908310610b665760405162461bcd60e51b8152600401610b5d90610e3c565b60405180910390fd5b6000846000018481548110610b7757fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b81546000908210610bc05760405162461bcd60e51b8152600401610b5d90610dfa565b826000018281548110610bcf57fe5b9060005260206000200154905092915050565b600061096b83836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000081525060008281526001840160205260408120548281610c4f5760405162461bcd60e51b8152600401610b5d9190610da7565b50846000016001820381548110610c6257fe5b9060005260206000209060020201600101549150509392505050565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b60008060408385031215610cba578182fd5b50508035926020909101359150565b60008060008060808587031215610cde578182fd5b84359350602085013592506040850135915060608501356001600160a01b0381168114610d09578182fd5b939692955090935050565b60008060008060808587031215610d29578384fd5b5050823594602084013594506040840135936060013592509050565b602080825282518282018190526000919060409081850190868401855b82811015610d9a5781518051855286810151878601528501516001600160a01b03168585015260609093019290850190600101610d62565b5091979650505050505050565b6000602080835283518082850152825b81811015610dd357858101830151858201604001528201610db7565b81811115610de45783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b60608201526080019056fea26469706673582212207b1648619c507ca21162195a0c3eeaabfea04cd9e3b007e427ce6626b0354d3264736f6c63430006060033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006b5760003560e01c80620743eb1461007057806324faa96914610099578063727fe92f146100ac57806391fa0728146100bf578063e2da53bb146100d2578063ef66b8e8146100e5575b600080fd5b61008361007e366004610d14565b6100f8565b6040516100909190610d45565b60405180910390f35b6100836100a7366004610cc9565b6103aa565b6100836100ba366004610cc9565b6105d5565b6100836100cd366004610ca8565b610712565b6100836100e0366004610ca8565b6107fb565b6100836100f3366004610d14565b610972565b6060600061010586610add565b111561036d576000831561011e57826001850302610121565b60005b600161012c88610add565b03039050600061015a60018587156101445787610147565b60015b020360016101548a610add565b03610aee565b600161016589610add565b0303905060018183030160608167ffffffffffffffff8111801561018857600080fd5b506040519080825280602002602001820160405280156101c257816020015b6101af610c7e565b8152602001906001900390816101a75790505b509050826102ce5760005b8385111561025d576000806101e88c8863ffffffff610b0416565b9150915060405180606001604052808381526020018281526020018c600085815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031681525084848151811061024157fe5b60209081029190910101525050600019909401936001016101cd565b506000806102718b8263ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908f9052829020546001600160a01b031691810191909152855192945090925090849060001987019081106102bc57fe5b60200260200101819052505050610362565b60005b838510610360576000806102eb8c8863ffffffff610b0416565b9150915060405180606001604052808381526020018281526020018c600085815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031681525084848151811061034457fe5b60209081029190910101525050600019909401936001016102d1565b505b93506103a292505050565b604080516000808252602082019092529061039e565b61038b610c7e565b8152602001906001900390816103835790505b5090505b949350505050565b6001600160a01b038116600090815260208390526040902060609081906103d090610add565b67ffffffffffffffff811180156103e657600080fd5b5060405190808252806020026020018201604052801561042057816020015b61040d610c7e565b8152602001906001900390816104055790505b506001600160a01b03841660009081526020869052604081209192509061044690610add565b11156105cc576001600160a01b038316600090815260208590526040812060019061047090610add565b0390505b8015610528576001600160a01b03841660009081526020869052604081206104a2908363ffffffff610b1c16565b905060006104b6898363ffffffff610b2816565b60408051606081018252848152602080820184905260008681528c8252838120546001600160a01b03908116848601528b168152908b905291909120919250908590859060019061050690610add565b03038151811061051257fe5b6020908102919091010152505060001901610474565b506001600160a01b0383166000908152602085905260408120610551908263ffffffff610b1c16565b90506000610565888363ffffffff610b2816565b60408051606081018252848152602080820184905260008681528b8252838120546001600160a01b03908116848601528a168152908a9052919091209192509084906001906105b390610add565b03815181106105be57fe5b602002602001018190525050505b95945050505050565b6001600160a01b038116600090815260208390526040902060609081906105fb90610add565b67ffffffffffffffff8111801561061157600080fd5b5060405190808252806020026020018201604052801561064b57816020015b610638610c7e565b8152602001906001900390816106305790505b50905060005b6001600160a01b038416600090815260208690526040902061067290610add565b81101561039e576001600160a01b03841660009081526020869052604081206106a1908363ffffffff610b1c16565b905060006106b5898363ffffffff610b2816565b600083815260208a81526040918290205482516060810184528681529182018490526001600160a01b0316918101829052865192935090918690869081106106f957fe5b6020026020010181905250505050806001019050610651565b60608061071e84610add565b67ffffffffffffffff8111801561073457600080fd5b5060405190808252806020026020018201604052801561076e57816020015b61075b610c7e565b8152602001906001900390816107535790505b50905060005b61077d85610add565b8110156107f357600080610797878463ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908b9052829020546001600160a01b0316918101919091528651929450909250908590859081106107de57fe5b60209081029190910101525050600101610774565b509392505050565b60608061080784610add565b67ffffffffffffffff8111801561081d57600080fd5b5060405190808252806020026020018201604052801561085757816020015b610844610c7e565b81526020019060019003908161083c5790505b509050600061086585610add565b111561096b576000600161087886610add565b0390505b80156108fb57600080610895878463ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908b9052829020546001600160a01b0316918101919091529193509150848460016108d98b610add565b0303815181106108e557fe5b602090810291909101015250506000190161087c565b5060008061090f868263ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908a9052829020546001600160a01b031691810191909152919350915083600161095289610add565b038151811061095d57fe5b602002602001018190525050505b9392505050565b6060600061097f86610add565b1115610aa457600083156109985782600185030261099b565b60005b905060006109c18486156109af57866109b2565b60015b026109bc89610add565b610aee565b9050606082820367ffffffffffffffff811180156109de57600080fd5b50604051908082528060200260200182016040528015610a1857816020015b610a05610c7e565b8152602001906001900390816109fd5790505b50905060005b82841015610a9957600080610a398b8763ffffffff610b0416565b6040805160608101825283815260208082018490526000858152908f9052829020546001600160a01b031691810191909152865192945090925090859085908110610a8057fe5b6020908102919091010152505060019384019301610a1e565b5092506103a2915050565b6040805160008082526020820190925290610ad5565b610ac2610c7e565b815260200190600190039081610aba5790505b5090506103a2565b6000610ae882610b34565b92915050565b6000818310610afd578161096b565b5090919050565b600080610b118484610b38565b915091509250929050565b600061096b8383610b9d565b600061096b8383610be2565b5490565b815460009081908310610b665760405162461bcd60e51b8152600401610b5d90610e3c565b60405180910390fd5b6000846000018481548110610b7757fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b81546000908210610bc05760405162461bcd60e51b8152600401610b5d90610dfa565b826000018281548110610bcf57fe5b9060005260206000200154905092915050565b600061096b83836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000081525060008281526001840160205260408120548281610c4f5760405162461bcd60e51b8152600401610b5d9190610da7565b50846000016001820381548110610c6257fe5b9060005260206000209060020201600101549150509392505050565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b60008060408385031215610cba578182fd5b50508035926020909101359150565b60008060008060808587031215610cde578182fd5b84359350602085013592506040850135915060608501356001600160a01b0381168114610d09578182fd5b939692955090935050565b60008060008060808587031215610d29578384fd5b5050823594602084013594506040840135936060013592509050565b602080825282518282018190526000919060409081850190868401855b82811015610d9a5781518051855286810151878601528501516001600160a01b03168585015260609093019290850190600101610d62565b5091979650505050505050565b6000602080835283518082850152825b81811015610dd357858101830151858201604001528201610db7565b81811115610de45783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b60608201526080019056fea26469706673582212207b1648619c507ca21162195a0c3eeaabfea04cd9e3b007e427ce6626b0354d3264736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}